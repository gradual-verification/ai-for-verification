[
  PackageDecl (loc "<dummy location>", "", [], [
    Struct (loc "stack_fbp.c(3,1-7)", "node", [], Some (([], [Field (loc "stack_fbp.c(4,18-22)", Real, PtrTypeExpr (loc "stack_fbp.c(4,17-18)", StructTypeExpr (loc "stack_fbp.c(4,5-11)", Some ("node"), None, [], [])), "next", Instance, Public, false, None); Field (loc "stack_fbp.c(5,9-14)", Real, ManifestTypeExpr (loc "stack_fbp.c(5,5-8)", Int (Signed, IntRank)), "value", Instance, Public, false, None)], [], false)), []);
    Struct (loc "stack_fbp.c(8,1-7)", "stack", [], Some (([], [Field (loc "stack_fbp.c(9,18-22)", Real, PtrTypeExpr (loc "stack_fbp.c(9,17-18)", StructTypeExpr (loc "stack_fbp.c(9,5-11)", Some ("node"), None, [], [])), "head", Instance, Public, false, None)], [], false)), []);
    PredFamilyDecl (loc "stack_fbp.c(14,1-10)", "nodes", [], 0, [PtrTypeExpr (loc "stack_fbp.c(14,29-30)", StructTypeExpr (loc "stack_fbp.c(14,17-23)", Some ("node"), None, [], [])); ManifestTypeExpr (loc "stack_fbp.c(14,36-39)", Int (Signed, IntRank))], None, Inductiveness_Inductive);
    PredFamilyInstanceDecl (loc "stack_fbp.c(14,1-10)", "nodes", [], [], [(PtrTypeExpr (loc "stack_fbp.c(14,29-30)", StructTypeExpr (loc "stack_fbp.c(14,17-23)", Some ("node"), None, [], [])), "node"); (ManifestTypeExpr (loc "stack_fbp.c(14,36-39)", Int (Signed, IntRank)), "count")], IfExpr (loc "stack_fbp.c(15,15-16)", Operation (loc "stack_fbp.c(15,10-12)", Eq, [Var (loc "stack_fbp.c(15,5-9)", "node"); IntLit (loc "stack_fbp.c(15,13-14)", big_int_of_string "0", false, false, NoLSuffix)]), Operation (loc "stack_fbp.c(15,23-25)", Eq, [Var (loc "stack_fbp.c(15,17-22)", "count"); IntLit (loc "stack_fbp.c(15,26-27)", big_int_of_string "0", false, false, NoLSuffix)]), Sep (loc "stack_fbp.c(15,40-43)", Operation (loc "stack_fbp.c(15,32-33)", Lt, [IntLit (loc "stack_fbp.c(15,30-31)", big_int_of_string "0", false, false, NoLSuffix); Var (loc "stack_fbp.c(15,34-39)", "count")]), Sep (loc "stack_fbp.c(15,65-68)", PointsTo (loc "stack_fbp.c(15,55-58)", Read (loc "stack_fbp.c(15,48-50)", Var (loc "stack_fbp.c(15,44-48)", "node"), "next"), "RegularPointsTo", VarPat (loc "stack_fbp.c(15,60-64)", "next")), Sep (loc "stack_fbp.c(15,92-95)", PointsTo (loc "stack_fbp.c(15,81-84)", Read (loc "stack_fbp.c(15,73-75)", Var (loc "stack_fbp.c(15,69-73)", "node"), "value"), "RegularPointsTo", VarPat (loc "stack_fbp.c(15,86-91)", "value")), Sep (loc "stack_fbp.c(15,120-123)", CallExpr (loc "stack_fbp.c(15,96-113)", "malloc_block_node", [], [], [LitPat (Var (loc "stack_fbp.c(15,114-118)", "node"))], Static), CallExpr (loc "stack_fbp.c(15,124-129)", "nodes", [], [], [
      LitPat (Var (loc "stack_fbp.c(15,130-134)", "next"));
      LitPat (Operation (loc "stack_fbp.c(15,142-143)", Sub, [Var (loc "stack_fbp.c(15,136-141)", "count"); IntLit (loc "stack_fbp.c(15,144-145)", big_int_of_string "1", true, false, NoLSuffix)]))
    ], Static)))))));
    PredFamilyDecl (loc "stack_fbp.c(17,1-10)", "stack", [], 0, [PtrTypeExpr (loc "stack_fbp.c(17,30-31)", StructTypeExpr (loc "stack_fbp.c(17,17-23)", Some ("stack"), None, [], [])); ManifestTypeExpr (loc "stack_fbp.c(17,38-41)", Int (Signed, IntRank))], None, Inductiveness_Inductive);
    PredFamilyInstanceDecl (loc "stack_fbp.c(17,1-10)", "stack", [], [], [(PtrTypeExpr (loc "stack_fbp.c(17,30-31)", StructTypeExpr (loc "stack_fbp.c(17,17-23)", Some ("stack"), None, [], [])), "stack"); (ManifestTypeExpr (loc "stack_fbp.c(17,38-41)", Int (Signed, IntRank)), "count")], Sep (loc "stack_fbp.c(18,27-30)", PointsTo (loc "stack_fbp.c(18,17-20)", Read (loc "stack_fbp.c(18,10-12)", Var (loc "stack_fbp.c(18,5-10)", "stack"), "head"), "RegularPointsTo", VarPat (loc "stack_fbp.c(18,22-26)", "head")), Sep (loc "stack_fbp.c(18,57-60)", CallExpr (loc "stack_fbp.c(18,31-49)", "malloc_block_stack", [], [], [LitPat (Var (loc "stack_fbp.c(18,50-55)", "stack"))], Static), Sep (loc "stack_fbp.c(18,72-75)", Operation (loc "stack_fbp.c(18,63-65)", Le, [IntLit (loc "stack_fbp.c(18,61-62)", big_int_of_string "0", false, false, NoLSuffix); Var (loc "stack_fbp.c(18,66-71)", "count")]), CallExpr (loc "stack_fbp.c(18,76-81)", "nodes", [], [], [LitPat (Var (loc "stack_fbp.c(18,82-86)", "head")); LitPat (Var (loc "stack_fbp.c(18,88-93)", "count"))], Static)))));
    Func (loc "stack_fbp.c(22,15-27)", Regular, [], Some (PtrTypeExpr (loc "stack_fbp.c(22,14-15)", StructTypeExpr (loc "stack_fbp.c(22,1-7)", Some ("stack"), None, [], []))), "create_stack", [], false, None, Some ((True (loc "stack_fbp.c(23,18-22)"), CallExpr (loc "stack_fbp.c(24,17-22)", "stack", [], [], [LitPat (Var (loc "stack_fbp.c(24,23-29)", "result")); LitPat (IntLit (loc "stack_fbp.c(24,31-32)", big_int_of_string "0", false, false, NoLSuffix))], Static))), false, Some (([
      DeclStmt (loc "stack_fbp.c(26,25-26)", [
        (loc "stack_fbp.c(26,25-26)", Some (PtrTypeExpr (loc "stack_fbp.c(26,18-19)", StructTypeExpr (loc "stack_fbp.c(26,5-11)", Some ("stack"), None, [], []))), "stack", Some (CallExpr (loc "stack_fbp.c(26,27-33)", "malloc", [], [], [LitPat (SizeofExpr (loc "stack_fbp.c(26,34-40)", TypeExpr (StructTypeExpr (loc "stack_fbp.c(26,41-47)", Some ("stack"), None, [], []))))], Static)), (ref (false), ref (None)))
      ]);
      IfStmt (loc "stack_fbp.c(27,5-7)", Operation (loc "stack_fbp.c(27,15-17)", Eq, [Var (loc "stack_fbp.c(27,9-14)", "stack"); IntLit (loc "stack_fbp.c(27,18-19)", big_int_of_string "0", false, false, NoLSuffix)]), [
        BlockStmt (loc "stack_fbp.c(27,21-22)", [], [ExprStmt (CallExpr (loc "stack_fbp.c(27,23-28)", "abort", [], [], [], Static))], loc "stack_fbp.c(27,32-33)", ref ([]))
      ], []);
      ExprStmt (AssignExpr (loc "stack_fbp.c(28,17-18)", Read (loc "stack_fbp.c(28,10-12)", Var (loc "stack_fbp.c(28,5-10)", "stack"), "head"), IntLit (loc "stack_fbp.c(28,19-20)", big_int_of_string "0", false, false, NoLSuffix)));
      ReturnStmt (loc "stack_fbp.c(29,5-11)", Some (Var (loc "stack_fbp.c(29,12-17)", "stack")))
    ], loc "stack_fbp.c(30,1-2)")), false, [])
  ])
]