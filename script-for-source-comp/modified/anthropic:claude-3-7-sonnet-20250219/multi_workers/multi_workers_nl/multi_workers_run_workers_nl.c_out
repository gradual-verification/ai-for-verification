static int counter = 0;
struct shared {
struct mutex *mtx;
};
void worker(struct shared *data)
{
struct shared *s = data;
mutex_acquire(s->mtx);
int tmp = counter;
if (tmp == INT_MAX) {
abort();
}
counter = tmp + 1;
mutex_release(s->mtx);
}
void run_workers()
{
struct shared *s = malloc(sizeof(struct shared));
if (s == 0) abort();
s->mtx = create_mutex();
struct thread *threads[NUM];
for (int i = 0; i < NUM; i++)
{
threads[i] = thread_start_joinable(worker, s);
}
for (int i = 0; i < NUM; i++)
{
thread_join(threads[i]);
}
mutex_dispose(s->mtx);
free(s);
}
