struct Node {
struct Node* left;
struct Node* right;
struct Node* parent;
int count;
};
struct Node* internalCreate(struct Node* parent)
{
struct Node* n = malloc(sizeof(struct Node));
if(n==0) {
abort();
} else {}
n->left = 0;
n->right = 0;
n->parent = parent;
n->count = 1;
return n;
}
void fix(struct Node* node)
{
int tmp = node->count;
if (tmp == INT_MAX) {
abort();
}
node->count = tmp + 1;
struct Node* parent = node->parent;
if(parent==0){
} else {
fix(parent);
}
}
struct Node* internalAddLeft(struct Node* node)
{
struct Node* child = internalCreate(node);
node->left = child;
fix(node);
return child;
}
struct Node {
struct Node* left;
struct Node* right;
struct Node* parent;
int count;
};
struct Node* internalCreate(struct Node* parent)
{
struct Node* n = malloc(sizeof(struct Node));
if(n==0) {
abort();
} else {}
n->left = 0;
n->right = 0;
n->parent = parent;
n->count = 1;
return n;
}
void fix(struct Node* node)
{
int tmp = node->count;
if (tmp == INT_MAX) {
abort();
}
node->count = tmp + 1;
struct Node* parent = node->parent;
if(parent==0){
} else {
fix(parent);
}
}
struct Node* internalAddLeft(struct Node* node)
{
struct Node* child = internalCreate(node);
node->left = child;
fix(node);
return child;
}