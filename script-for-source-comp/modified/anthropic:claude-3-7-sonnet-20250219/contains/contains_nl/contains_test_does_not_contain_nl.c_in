struct node {
void* value;
struct node* next;
};
typedef bool equals(void* v1, void* v2);
struct node* create_list()
{
return 0;
}
struct node* add(struct node* n, void* v)
{
struct node* nn = malloc(sizeof(struct node));
if(nn == 0) abort();
nn->value = v;
nn->next = n;
return nn;
}
bool list_contains(struct node* n, void* v, equals* eq)
{
if(n == 0) {
return false;
} else {
bool cont = eq(v, n->value);
if(cont) {
list_contains(n->next, v, eq);
return true;
} else {
cont = list_contains(n->next, v, eq);
return cont;
}
}
}
bool my_equals(void* v1, void* v2)
{
if((uintptr_t)v1 == (uintptr_t)v2) {
return true;
} else {
return false;
}
}
void test_does_not_contain()
{
struct node* n = create_list();
n = add(n, (void*) 1);
n = add(n, (void*) 2);
n = add(n, (void*) 3);
bool cont = list_contains(n, (void*) 4, my_equals);
assert(cont == false);
}
