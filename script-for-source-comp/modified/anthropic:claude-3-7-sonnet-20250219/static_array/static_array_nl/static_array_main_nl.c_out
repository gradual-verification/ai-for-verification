typedef struct
{
int x;
int ar [7];
int y;
} struct_with_array;
struct mystruct {
struct_with_array s1;
int s2;
};
struct mystruct my_global_nested_struct = {{42, {420, 421, 422, 423, 424, 425, 426}, -3}, -99};
static int ar2 [55];
static struct_with_array bigArray[10] = {{100, {1,2,3,4}, 200}, {300, {5,6,7}, 400}};
struct point { int x; int y; };
struct point points[] = { { 10, 20 }, { 30, 40 } };
static void foo()
{
struct mystruct my_local_nested_struct;
memset(&my_local_nested_struct, 0, sizeof(struct mystruct));
memset(&(&my_local_nested_struct)->s1, 0, sizeof(struct_with_array));
struct mystruct *sh = malloc(sizeof(struct mystruct));
if (sh == 0) abort();
(&(&my_global_nested_struct)->s1)->ar[5] = 100;
(&(&my_local_nested_struct)->s1)->ar[5] = 200;
(&sh->s1)->ar[5] = 300;
free(sh);
}
void mod_ar2 (void)
{
ar2[ 1] = ar2[ 1] + ar2[26];
return;
}
int main(int argc, char **argv)
{
struct_with_array *bigArrayPtr = bigArray;
foo();
struct_with_array *s;
int    i = 1;
int    ar1 [55];
int    t;
ar1[ 0] = 1;
ar1[ 1] = 5;
ar1[ 2] = 0;
ar1[26] = 2;
ar1[ 1] = ar1[ 1] + ar1[26];
if (ar1[i] == 7)
{ t = ar1[2]; }
else
{ assert false; }
s = malloc (sizeof (struct_with_array));
if (s == 0) { abort(); }
s->ar[ 0] = 1;
s->ar[ 1] = 5;
s->ar[ 2] = 0;
s->ar[ 6] = 2;
s->ar[ 1] = s->ar[ 1] + s->ar[ 6];
if (s->ar[i] == 7)
{ t += s->ar[2]; }
else
{ assert false; }
free (s);
ar2[ 0] = 1;
ar2[ 1] = 5;
ar2[ 2] = 0;
ar2[26] = 2;
mod_ar2 ();
if (ar2[i] == 7)
{ t += ar2[2]; }
else
{ assert false; }
int xs[] = {1, 2, 3}, ys[] = {4, 5, 6, 7};
xs[1] = xs[2];
ys[2] = ys[3];
return (t);
}