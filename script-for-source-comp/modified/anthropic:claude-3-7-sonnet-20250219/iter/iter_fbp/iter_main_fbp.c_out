struct node {
struct node *next;
int value;
};
struct llist {
struct node *first;
struct node *last;
};
struct iter {
struct node *current;
};
struct llist *create_llist()
{
struct llist *l = malloc(sizeof(struct llist));
if (l == 0) abort();
struct node *n = calloc(1, sizeof(struct node));
if (n == 0) abort();
l->first = n;
l->last = n;
return l;
}
void llist_add(struct llist *list, int x)
{
struct node *l = 0;
struct node *n = calloc(1, sizeof(struct node));
if (n == 0) {
abort();
}
l = list->last;
l->next = n;
l->value = x;
list->last = n;
}
void llist_dispose(struct llist *list)
{
struct node *n = list->first;
struct node *l = list->last;
while (n != l)
{
struct node *next = n->next;
free(n);
n = next;
}
free(l);
free(list);
}
struct iter *llist_create_iter(struct llist *l)
{
struct iter *i = 0;
struct node *f = 0;
i = malloc(sizeof(struct iter));
if (i == 0) {
abort();
}
f = l->first;
i->current = f;
return i;
}
int iter_next(struct iter *i)
{
struct node *c = i->current;
int value = c->value;
struct node *n = c->next;
i->current = n;
return value;
}
void iter_dispose(struct iter *i)
{
free(i);
}
int main()
{
struct llist *l = create_llist();
llist_add(l, 5);
llist_add(l, 10);
llist_add(l, 15);
struct iter *i1 = llist_create_iter(l);
struct iter *i2 = llist_create_iter(l);
int i1e1 = iter_next(i1); assert(i1e1 == 5);
int i2e1 = iter_next(i2); assert(i2e1 == 5);
int i1e2 = iter_next(i1); assert(i1e2 == 10);
int i2e2 = iter_next(i2); assert(i2e2 == 10);
iter_dispose(i1);
iter_dispose(i2);
llist_dispose(l);
return 0;
}
struct node {
struct node *next;
int value;
};
struct llist {
struct node *first;
struct node *last;
};
struct iter {
struct node *current;
};
struct llist *create_llist()
{
struct llist *l = malloc(sizeof(struct llist));
if (l == 0) abort();
struct node *n = calloc(1, sizeof(struct node));
if (n == 0) abort();
l->first = n;
l->last = n;
return l;
}
void llist_add(struct llist *list, int x)
{
struct node *l = 0;
struct node *n = calloc(1, sizeof(struct node));
if (n == 0) {
abort();
}
l = list->last;
l->next = n;
l->value = x;
list->last = n;
}
void llist_dispose(struct llist *list)
{
struct node *n = list->first;
struct node *l = list->last;
while (n != l)
{
struct node *next = n->next;
free(n);
n = next;
}
free(l);
free(list);
}
struct iter *llist_create_iter(struct llist *l)
{
struct iter *i = 0;
struct node *f = 0;
i = malloc(sizeof(struct iter));
if (i == 0) {
abort();
}
f = l->first;
i->current = f;
return i;
}
int iter_next(struct iter *i)
{
struct node *c = i->current;
int value = c->value;
struct node *n = c->next;
i->current = n;
return value;
}
void iter_dispose(struct iter *i)
{
free(i);
}
int main()
{
struct llist *l = create_llist();
llist_add(l, 5);
llist_add(l, 10);
llist_add(l, 15);
struct iter *i1 = llist_create_iter(l);
struct iter *i2 = llist_create_iter(l);
int i1e1 = iter_next(i1);
assert(i1e1 == 5);
int i2e1 = iter_next(i2);
assert(i2e1 == 5);
int i1e2 = iter_next(i1);
assert(i1e2 == 10);
int i2e2 = iter_next(i2);
assert(i2e2 == 10);
iter_dispose(i1);
iter_dispose(i2);
llist_dispose(l);
return 0;
}