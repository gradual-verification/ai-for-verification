struct node {
struct node *next;
int value;
};
struct llist {
struct node *first;
struct node *last;
};
struct llist *create_llist()
{
struct llist *l = malloc(sizeof(struct llist));
if (l == 0) abort();
struct node *n = calloc(1, sizeof(struct node));
if (n == 0) abort();
l->first = n;
l->last = n;
return l;
}
void llist_add(struct llist *list, int x)
{
struct node *l = 0;
struct node *n = calloc(1, sizeof(struct node));
if (n == 0) {
abort();
}
l = list->last;
l->next = n;
l->value = x;
list->last = n;
}
void llist_append(struct llist *list1, struct llist *list2)
{
struct node *l1 = list1->last;
struct node *f2 = list2->first;
struct node *l2 = list2->last;
if (f2 == l2) {
free(l2);
free(list2);
} else {
l1->next = f2->next;
l1->value = f2->value;
list1->last = l2;
free(f2);
free(list2);
}
}
void llist_dispose(struct llist *list)
{
struct node *n = list->first;
struct node *l = list->last;
while (n != l)
{
struct node *next = n->next;
free(n);
n = next;
}
free(l);
free(list);
}
int llist_length_iterative(struct llist *list)
{
struct node *f = list->first;
struct node *n = f;
struct node *l = list->last;
int c = 0;
while (n != l)
{
struct node *next = n->next;
n = next;
if (c == INT_MAX) abort();
c = c + 1;
}
return c;
}
int llist_length_recursive_helper(struct node *n1, struct node *n2)
{
int len;
if(n1 == n2) {
len = 0;
} else {
len = llist_length_recursive_helper(n1->next, n2);
len = len + 1;
}
return len;
}
int llist_length_recursive(struct llist *l)
{
return llist_length_recursive_helper(l->first, l->last);
}
int llist_lookup(struct llist *list, int index)
{
struct node *f = list->first;
struct node *l = list->last;
struct node *n = f;
int i = 0;
while (i < index)
{
struct node *next = n->next;
n = next;
i = i + 1;
}
int value = n->value;
return value;
}
int llist_removeFirst(struct llist *l)
{
struct node *nf = l->first;
struct node *nfn = nf->next;
int nfv = nf->value;
free(nf);
l->first = nfn;
return nfv;
}
int main()
{
struct llist *l1 = create_llist();
struct llist *l2 = create_llist();
llist_add(l1, 10);
llist_add(l1, 20);
llist_add(l1, 30);
llist_add(l2, 40);
llist_add(l2, 50);
llist_add(l2, 60);
int x = llist_removeFirst(l2); assert(x == 40);
llist_append(l1, l2);
int n1 = llist_length_iterative(l1); assert(n1 == 5);
int n2 = llist_length_recursive(l1); assert(n2 == 5);
int e0 = llist_lookup(l1, 0); assert(e0 == 10);
int e1 = llist_lookup(l1, 1); assert(e1 == 20);
int e2 = llist_lookup(l1, 2); assert(e2 == 30);
int e3 = llist_lookup(l1, 3); assert(e3 == 50);
int e4 = llist_lookup(l1, 4); assert(e4 == 60);
llist_dispose(l1);
return 0;
}