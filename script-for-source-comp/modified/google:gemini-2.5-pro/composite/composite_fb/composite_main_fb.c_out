struct Node {
struct Node* left;
struct Node* right;
struct Node* parent;
int count;
};
struct Node* create()
{
struct Node* n = malloc(sizeof(struct Node));
if(n==0){
abort();
} else {
}
n->parent = 0;
n->left = 0;
n->right = 0;
n->count = 1;
return n;
}
struct Node* addLeft(struct Node* node)
{
struct Node* child = internalCreate(node);
node->left = child;
fix(node);
return child;
}
void fix(struct Node* node)
{
int tmp = node->count;
if (tmp == 2147483647) {
abort();
}
node->count = tmp + 1;
struct Node* parent = node->parent;
if(parent==0){
} else {
fix(parent);
}
}
int internalGetNbOfNodes(struct Node* n)
{
int c = n->count;
return c;
}
int main()
{
struct Node* mytree = create();
struct Node* child = addLeft(mytree);
struct Node* child2 = addLeft(child);
int c = getNbOfNodes(child2);
assert(c==1);
abort();
}
