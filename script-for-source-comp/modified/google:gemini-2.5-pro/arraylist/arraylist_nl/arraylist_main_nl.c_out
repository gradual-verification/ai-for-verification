struct arraylist {
void **data;
int size;
int capacity;
};
struct arraylist *create_arraylist()
{
struct arraylist *a = malloc(sizeof(struct arraylist));
if(a == 0) abort();
a->size = 0;
a->capacity = 100;
void **data = malloc(100 * sizeof(void*));
if(data == 0) abort();
a->data = data;
return a;
}
void *list_get(struct arraylist *a, int i)
{
void *result = a->data[i];
return result;
}
void list_add(struct arraylist *a, void *v)
{
if(a->capacity <= a->size) {
int old_capacity = a->capacity;
if (SIZE_MAX / sizeof(void *) < (size_t)old_capacity * 2 + 1) abort();
int new_capacity = old_capacity * 2 + 1;
if (INT_MAX / 2 - 1 < old_capacity) abort();
void** newData = malloc((size_t)new_capacity * sizeof(void*));
if(newData == 0) abort();
memcpy(newData, data_ptr, (size_t)size * sizeof(void*));
a->data = newData;
a->capacity = new_capacity;
free(data_ptr);
}
a->data[size] = v;
a->size += 1;
}
void list_dispose(struct arraylist* a)
{
free(a->data);
free(a);
}
int main()
{
struct arraylist* a = create_arraylist();
void* tmp = 0;
list_add(a, (void *)10);
list_add(a, (void *)20);
tmp = list_get(a, 1);
assert(tmp == (void*) 20);
list_dispose(a);
return 0;
}
