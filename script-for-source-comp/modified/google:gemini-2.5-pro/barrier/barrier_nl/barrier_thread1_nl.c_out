struct barrier {
struct mutex *mutex;
int n;
int k;
bool outgoing;
};
struct data {
struct barrier *barrier;
int x1;
int x2;
int y1;
int y2;
int i;
};
void barrier(struct barrier *b)
{
if (tid == 1) {
} else {
}
struct mutex *mutex = b->mutex;
mutex_acquire(mutex);
{
while (b->outgoing)
{
mutex_release(mutex);
mutex_acquire(mutex);
}
}
b->k++;
if (b->k == b->n) {
b->outgoing = true;
b->k--;
mutex_release(b->mutex);
} else {
while (!b->outgoing)
{
mutex_release(mutex);
mutex_acquire(mutex);
}
b->k--;
if (b->k == 0) {
b->outgoing = false;
}
mutex_release(mutex);
}
}
void thread1(struct data *d)
{
struct barrier *b = d->barrier;
{
barrier(b);
}
int N = 0;
while (N < 30)
{
int a1 = d->x1;
int a2 = d->x2;
assume(0 <= a1 && a1 <= 1000 && 0 <= a2 && a2 <= 1000);
if (a1 < 0 || a1 > 1000 || a2 < 0 || a2 > 1000) {abort();}
d->y1 = a1 + 2 * a2;
{
barrier(b);
}
a1 = d->y1;
a2 = d->y2;
assume(0 <= a1 && a1 <= 1000 && 0 <= a2 && a2 <= 1000);
if (a1 < 0 || a1 > 1000 || a2 < 0 || a2 > 1000) {abort();}
d->x1 = a1 + 2 * a2;
N = N + 1;
d->i = N;
{
barrier(b);
}
}
{
barrier(b);
}
d->i = 0;
}
