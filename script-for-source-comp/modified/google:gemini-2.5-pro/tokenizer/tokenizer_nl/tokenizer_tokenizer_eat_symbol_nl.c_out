struct tokenizer
{
charreader*           next_char;
int                   lastread;
int                   lasttoken;
struct string_buffer* buffer;
};
typedef int charreader();
void tokenizer_fill_buffer(struct tokenizer* tokenizer)
{
if ( tokenizer->lastread == -2 )
{
charreader *reader = tokenizer->next_char;
int result = reader();
if (result < -128 || result > 127)
abort();
tokenizer->lastread = result;
}
}
int tokenizer_peek(struct tokenizer* tokenizer)
{
tokenizer_fill_buffer(tokenizer);
int c = tokenizer->lastread;
return c;
}
int tokenizer_next_char(struct tokenizer* tokenizer)
{
int c;
tokenizer_fill_buffer(tokenizer);
c = tokenizer->lastread;
tokenizer->lastread = -2;
return c;
}
void string_buffer_append_char(struct string_buffer *buffer, char c)
{
char cc = c;
string_buffer_append_chars(buffer, &cc, 1);
}
bool is_symbol_char(int c)
{
return c > 32 && c <= 127 && c != '(' && c != ')';
}
int tokenizer_eat_symbol(struct tokenizer* tokenizer)
{
for (;;)
{
int result;
bool isSymbolChar;
result = tokenizer_peek(tokenizer);
isSymbolChar = is_symbol_char(result);
if (!isSymbolChar) {
break;
}
result = tokenizer_next_char(tokenizer);
string_buffer_append_char(tokenizer->buffer, (char)result);
}
return 'S';
}
